import com.mkyong.TestGoogleSea;
import java.awt.Graphics2D;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.TransferHandler;
import net.coobird.thumbnailator.Thumbnails;
import net.sourceforge.tess4j.Tesseract;
import net.sourceforge.tess4j.TesseractException;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author New
 */


public class MediScanByImage extends javax.swing.JFrame {

    /**
     * Creates new form MediScanByImage
     */
    public static final String GOOGLE_SEARCH_URL = "https://www.google.com/search";

    public MediScanByImage() {
        initComponents();
        dragDrop();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnUploadImage = new javax.swing.JButton();
        imgContainer = new javax.swing.JLabel();
        linksScrollPane = new javax.swing.JScrollPane();
        linksTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        btnUploadImage.setText("Upload Image / Drap & Drop");
        btnUploadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadImageActionPerformed(evt);
            }
        });

        imgContainer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        linksScrollPane.setBackground(new java.awt.Color(255, 255, 255));

        linksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        linksScrollPane.setViewportView(linksTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imgContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(linksScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(331, Short.MAX_VALUE)
                .addComponent(btnUploadImage)
                .addGap(319, 319, 319))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imgContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(linksScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnUploadImage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void processImg(BufferedImage ipimage,float scaleFactor,float offset) throws IOException, TesseractException 
	{             
            Map<String, Integer> map = new HashMap<>();
            map.put("placebo", 1); 
            map.put("pyridoxine", 2); 
            map.put("flunisolide", 3);
            map.put("nitrostat", 4);   
            map.put("mortar", 5);
	         // Making an empty image buffer 
		// to store image later 
		// ipimage is an image buffer 
		// of input image 
		BufferedImage opimage = new BufferedImage(1050,1024,ipimage.getType()); 

		// creating a 2D platform 
		// on the buffer image 
		// for drawing the new image 
		Graphics2D graphic = opimage.createGraphics(); 

		// drawing new image starting from 0 0 
		// of size 1050 x 1024 (zoomed images) 
		// null is the ImageObserver class object 
		graphic.drawImage(ipimage, 0, 0,1050, 1024, null); 
		graphic.dispose(); 

		// rescale OP object 
		// for gray scaling images 
		RescaleOp rescale = new RescaleOp(scaleFactor, offset, null); 

		// performing scaling 
		// and writing on a .png file 
		BufferedImage fopimage = rescale.filter(opimage, null); 
		ImageIO.write(fopimage,"jpg",new File("C:\\Users\\New\\Desktop\\KJSCE HACK 4.0\\out.jpg")); 

		// Instantiating the Tesseract class 
		// which is used to perform OCR 
		Tesseract it = new Tesseract();

		it.setDatapath("C:\\Users\\New\\Desktop\\KJSCE HACK 4.0\\Tess4J"); 

		// doing OCR on the image 
		// and storing result in string str 
		String str = (it.doOCR(fopimage)).toLowerCase(); 
		System.out.println(str); 
                
                String st = "";
             
                boolean decision=true;
                
        for (Iterator<String> itz = map.keySet().iterator(); itz.hasNext();) {
            String key = itz.next();
//            System.out.println("IN FOR WITH KEY : "+key );
            if(isSubstring(key,str)==-1)
            {
//                System.out.println("In IF");
                decision = false;
            }
            else
            {
//                System.out.println("In ELSE");
                decision = true;
//                System.out.println("Inside :"+st);
                st=key;
                break;
            }
        }
                
                if(decision == true)
                {   
                System.out.println("GOT MATCHED : "+st);
//                testGoogleSea(st);
                TestGoogleSea obj = new TestGoogleSea();
	Set<String> result = obj.getDataFromGoogle(st + "medicine");
        result.stream().forEach((temp) -> {
            System.out.println(temp);
        });
	System.out.println(result.size());
	}   
        }
    private void btnUploadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadImageActionPerformed
        // TODO add your handling code here:
         
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(null);
        File sourceFile = fileChooser.getSelectedFile();
        fitImg(sourceFile);
//        imagePath = sourceFile.getAbsolutePath();
        try {
            retrieveText(imagePath);
        } catch (Exception ex) {
            Logger.getLogger(MediScanByImage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnUploadImageActionPerformed
    private static void retrieveText(String path)throws Exception{
        
                File f = new File(path); 

		BufferedImage ipimage = ImageIO.read(f); 

		// getting RGB content of the whole image file 
		double d= ipimage.getRGB(ipimage.getTileWidth() / 2, ipimage.getTileHeight() / 2); 

		// comparing the values 
		// and setting new scaling values 
		// that are later on used by RescaleOP
		if (d >= -1.4211511E7 && d < -7254228) { 
			processImg(ipimage, 3f, -10f); 
		} 
		else if (d >= -7254228 && d < -2171170) { 
			processImg(ipimage, 1.455f, -47f); 
		} 
		else if (d >= -2171170 && d < -1907998) { 
			processImg(ipimage, 1.35f, -10f); 
		} 
		else if (d >= -1907998 && d < -257) { 
			processImg(ipimage, 1.19f, 0.5f); 
		} 
		else if (d >= -257 && d < -1) { 
			processImg(ipimage, 1f, 0.5f); 
		} 
		else if (d >= -1 && d < 2) { 
			processImg(ipimage, 1f, 0.35f); 
		}
    }
    
    private void dragDrop(){
            TransferHandler th = new TransferHandler(){
            @Override
            public boolean canImport(JComponent comp, DataFlavor[] transferFlavors){
                return true;
            }
            @Override
            public boolean importData(JComponent comp, Transferable t){
                try {
                    List<File> files = (List<File>) t.getTransferData(DataFlavor.javaFileListFlavor);
//                    for(File file : files){
//                        System.out.println(file.getName());
//                    }
                    if(files.size()==1){
                        File f = files.get(0);
                        imgContainer.setIcon(new ImageIcon(f.getAbsolutePath()));
                        System.out.println(f.getAbsolutePath());
                        fitImg(f);
                        retrieveText(f.getAbsolutePath());
                    }
                } catch (UnsupportedFlavorException ex) {
                    Logger.getLogger(MediScanByImage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MediScanByImage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(MediScanByImage.class.getName()).log(Level.SEVERE, null, ex);
                }
                return true;
            }
        };
        imgContainer.setTransferHandler(th);
    }
    
    private void fitImg(File sourceFile){
                if(sourceFile!=null){   
            imagePath = sourceFile.getAbsolutePath();
//            txtImagePath.setText(imagePath);
            try{
                File image = new File(imagePath);
                BufferedImage thumbnail = Thumbnails.of(image).size(750,300).asBufferedImage();
                
                
                /******************************************************************************
                 * ****************************************************************************
                 * The Below Code is used to convert the image which is converted to thumbnail
                 * to byte array so that we can store the byte array in our database as blob
                 * data type
                 * ****************************************************************************
                 * ****************************************************************************
                 */
                ByteArrayOutputStream os = new ByteArrayOutputStream();
                ImageIO.write(thumbnail,"jpg", os);
                byteImage = os.toByteArray();
                /******************************************************************************
                 * ****************************************************************************
                 */
                
                
                viewImage = new ImageIcon(thumbnail);
                imgContainer.setIcon(viewImage);
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Issue:"+e.getMessage());
        }
    }
    }
    static int isSubstring(String s1, String s2) 
    { 
        int M = s1.length(); 
        int N = s2.length(); 
      
        /* A loop to slide pat[] one by one */
        for (int i = 0; i <= N - M; i++) { 
            int j; 
      
            /* For current index i, check for 
            pattern match */
            for (j = 0; j < M; j++) 
                if (s2.charAt(i + j) != s1.charAt(j)) 
                    break; 
      
            if (j == M) 
                return i; 
        } 
        return -1; 
    } 
    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     * @throws net.sourceforge.tess4j.TesseractException
     */
    public static void main(String args[]) throws IOException, TesseractException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MediScanByImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MediScanByImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MediScanByImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MediScanByImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MediScanByImage().setVisible(true);
            }
        }); 
	}         
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUploadImage;
    private javax.swing.JLabel imgContainer;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane linksScrollPane;
    private javax.swing.JTable linksTable;
    // End of variables declaration//GEN-END:variables
    private static String imagePath = null;
    private byte[] byteImage = null;
    private ImageIcon viewImage = null;
}